FILE* f;

    f = fopen("listaEmpleados.csv", "w");//aca escribimos en texto en el archivo que usaremos en File2
    /*falta validacion*/

    /*for(int i=0; i < len; i++)
    {
        fprintf(f, "%d,%s,%c,%.2f\n", ((eEmpleado*)ll_get(lista, i))->id, ((eEmpleado*)ll_get(lista, i))->nombre, ((eEmpleado*)ll_get(lista, i))->sexo, ((eEmpleado*)ll_get(lista, i))->sueldo);//lo mostras en texto
    }

    fclose(f);






/*if((ll_add(lista, emp1) == 0 && ll_add(lista, emp2) == 0 && ll_add(lista, emp3) == 0 && ll_add(lista, emp4) == 0 && ll_add(lista, emp5) == 0))
    {
        printf("*******************************ll_add***************************************\n\n");
        printf("Cargue estructuras eEmpleado con ll_add(), funciona correctamente.\n\n");
        mostrarEmpleados(lista);
    }





    int len = ll_len(lista);

    if(len != -1)
    {
        printf("*******************************ll_len***************************************\n\n");
        printf("El tamanio de la lista devuelto por ll_len() debe ser 5 y es: %d: \n\n", len);
    }

    FILE* f;

    f = fopen("listaEmpleados.csv", "w");//aca escribimos en texto en el archivo que usaremos en File2

    for(int i=0; i < len; i++)
    {
        fprintf(f, "%d,%s,%d,%d\n", ((Employee*)ll_get(lista, i))->id, ((Employee*)ll_get(lista, i))->nombre, ((Employee*)ll_get(lista, i))->horasTrabajadas, ((Employee*)ll_get(lista, i))->sueldo);//lo mostras en texto
    }

    fclose(f);*/



    FILE* f;

    //f = fopen("numeros.txt", "r");//lo abris como lectura de texto
    //f = fopen("empleados.csv", "r");//lo abris como lectura de texto
    f = fopen("listaEmpleados.csv", "r");//lo creamos en file3, lo creamos como csv texto y lo leo con uno que lee csv
    if(f == NULL)
    {
        printf("No se pudo abrir el archivo\n");
        exit(EXIT_FAILURE);
    }

    //fscanf(f,"%[^,],%[^,],%[^,],%[^\n]\n", buffer[0], buffer[1], buffer[2], buffer[3]);//lectura fantasma, es para que haga una sola lectura y salteas la primera linea que es un encabezado
    //printf("%s  %s  %s  %s\n\n", buffer[0], buffer[1], buffer[2], buffer[3]);//asi podes mostrar el encbezado antes del while

    while(!feof(f))//con feof recorres hasta que encuentre el final del archivo, son los datos de un empleado
    {
        //cant = fscanf(f,"%d,%[^,],%c,%f\n", &id, nombre, &sexo, &sueldo);//le decis que tiene que leer, asi levanta la primera linea, el cursor quedo al inicio de la segunda linea
        cant = fscanf(f,"%[^,],%[^,],%[^,],%[^\n]\n", buffer[0], buffer[1], buffer[2], buffer[3]);//ahora leo todo como texto

        if(cant == 4)//mostras si devolvio 4 variables en fscanf
        {
            //auxEmpleado = new_EmpleadoParam(id, nombre, sexo, sueldo);//validar que sea distinto de null, primera version

            //auxEmpleado = new_EmpleadoParam(atoi(buffer[0]), buffer[1], buffer[2][0], atof(buffer[3]));//ahora convierto los caracteres en el tipo de dato que necesito cuando llamo al constructor

/*!=NULL*/auxEmpleado = employee_newParametros(buffer[0], buffer[1], buffer[2], buffer[3]);//ahora ya estan convertidos entoces le paso los buffer sin el atoi o el atof
            ll_add(lista, auxEmpleado);
            printf("%d %s %d %d\n", auxEmpleado->id, auxEmpleado->nombre, auxEmpleado->horasTrabajadas, auxEmpleado->sueldo);//si pude leer lo muestro
        }
        else
        {
            break;//asi salis del while si no hay 4
        }
    }

    fclose(f);

    mostrarEmpleados(lista);

















idexof solo con get

Employee* empIndex = employee_new();

    if(empIndex != NULL)
    {
        for(int i = 0; i < len; i++)
        {
            empIndex = ll_get(lista, i);

            if(!(strcmp(empIndex->nombre, "Maria")))
            {
                printf("\n\n*******************************TEST***************************************\n\n");
                printf("Utilice el TEST para modificar el elemento de indice 1 que quedo asi:\n\n");
                printf("Elemento encontrado: \n");
                mostrarEmpleado(empIndex);
                break;
            }
        }

    }